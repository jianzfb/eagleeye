extern "C"{
    /**
     * @brief initialize {{project}} pipeline
     * 
     * @return true 
     * @return false 
     */
    bool eagleeye_{{project}}_initialize(const char* config_folder);

    /**
     * @brief load {{project}} pipeline configure
     * 
     * @param folder 
     * @return true 
     * @return false 
     */
    bool eagleeye_{{project}}_load_config(const char* config_file);

    /**
     * @brief save {{project}} pipeline configure
     * 
     * @param folder 
     * @return true 
     * @return false 
     */
    bool eagleeye_{{project}}_save_config(const char* config_file);

    /**
     * @brief release {{project}} pipeline
     * 
     * @return true 
     * @return false 
     */
    bool eagleeye_{{project}}_release();

    /**
     * @brief run {{project}} pipeline
     * 
     * @return true 
     * @return false 
     */
    bool eagleeye_{{project}}_run();

    /**
     * @brief get {{project}} pipeline version
     * 
     * @param pipeline_version
     * @return true 
     * @return false 
     */
    bool eagleeye_{{project}}_version(char* pipeline_version);

    /**
     * @brief reset {{project}} pipeline state
     * 
     * @return true 
     * @return false 
     */
    bool eagleeye_{{project}}_reset();

    /**
     * @brief set any node param in {{project}} pipeline
     * 
     * @param node_name node name in pipeline
     * @param param_name node param in pipeline
     * @param value param value
     * @return true  success to set
     * @return false fail to set
     */
    bool eagleeye_{{project}}_set_param(const char* node_name, const char* param_name, const void* value);

    /**
     * @brief get any node param in {{project}} pipeline
     * 
     * @param node_name node name in pipeline
     * @param param_name node param in pipeline
     * @param value param value
     * @return true success to get
     * @return false fail to get
     */
    bool eagleeye_{{project}}_get_param(const char* node_name, const char* param_name, void* value);

    /**
     * @brief set input data from {{project}} input node
     * 
     * @param node_name node name in pipeline
     * @param data data pointer
     * @param data_size dimension (H,W,C)
     * @param data_dims dimension number
     * @return true 
     * @return false 
     */
    bool eagleeye_{{project}}_set_input(const char* node_name, void* data, const int* data_size, const int data_dims);

    /**
     * @brief get output data from {{project}} output node
     * 
     * @param node_name node name in pipeline
     * @param data data pointer
     * @param data_size dimension (H,W,C)/(B,H,W,C)
     * @param data_dims dimension number
     * @param data_type data type
     * @return true 
     * @return false 
     */
    bool eagleeye_{{project}}_get_output(const char* node_name, void*& data, int* data_size, int& data_dims,int& data_type);
}