PROJECT({{project}})

cmake_minimum_required(VERSION 3.5)
add_definitions(-std=c++11)
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}     -Wall -O3")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -O3")

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY {{'${'}}{{project}}_SOURCE_DIR{{'}'}}/bin/{{'${ANDROID_ABI}'}})
set(EXECUTABLE_OUTPUT_PATH {{'${'}}{{project}}_SOURCE_DIR{{'}'}}/bin/{{'${ANDROID_ABI}'}})
set(LIBRARY_OUTPUT_PATH {{'${'}}{{project}}_SOURCE_DIR{{'}'}}/bin/{{'${ANDROID_ABI}'}})
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} {{'${CMAKE_CURRENT_SOURCE_DIR}'}}/cmake) 

add_definitions(-DEAGLEEYE_ENABLE_LOG)
add_definitions(-DEAGLEEYE_ANDROID_APP)

set({{project}}_SRC 
    ./{{project}}_plugin.cpp)

include_directories({{eagleeye}}/include/eagleeye/)
include_directories({{eagleeye}}/include)
link_directories({{eagleeye}}/libs/{{'${ANDROID_ABI}'}})
add_library({{project}} SHARED {{'${'}}{{project}}_SRC{{'}'}})  

{% if opencv != '' %}
set(OpenCV_DIR {{opencv}}}})
find_package(OpenCV REQUIRED)
message(STATUS "OpenCV libraries: ${OpenCV_LIBS}")
include_directories(${OpenCV_INCLUDE_DIRS})

TARGET_LINK_LIBRARIES({{project}} ${OpenCV_LIBS})
{% else %}
include_directories({{eagleeye}}/3rd/opencv/include)
add_library(libopencv SHARED IMPORTED)
set_target_properties(
    libopencv
    PROPERTIES IMPORTED_LOCATION 
    {{eagleeye}}/3rd/opencv/lib/${ANDROID_ABI}/libopencv_java3.so
)
TARGET_LINK_LIBRARIES({{project}} libopencv)
{% endif %}


{% if paddlelite != '' %}
include_directories({{paddlelite}}/{{'${ANDROID_ABI}'}}/include)
include_directories({{paddlelite}}/{{'${ANDROID_ABI}'}}/include/lite/api)
add_library(libpaddlelite SHARED IMPORTED)
set_target_properties(
    libpaddlelite
    PROPERTIES IMPORTED_LOCATION 
    {{paddlelite}}/{{'${ANDROID_ABI}'}}/lib/libpaddle_light_api_shared.so
)
TARGET_LINK_LIBRARIES({{project}} libpaddlelite)
{% endif %}

{% if tnn != '' %}
{% endif %}

{% for model in precompiled_models %}
add_library(lib{{model}} STATIC IMPORTED)
set_target_properties(
    lib{{model}}
    PROPERTIES IMPORTED_LOCATION 
    ../../lib{{model}}.a
)
TARGET_LINK_LIBRARIES({{project}} lib{{model}})
{% endfor %}

add_definitions(-DEAGLEEYE_OPENCL_OPTIMIZATION)
include_directories({{eagleeye}}/3rd/opencl/include)
add_library(libOpenCL SHARED IMPORTED)
set_target_properties(
    libOpenCL
    PROPERTIES IMPORTED_LOCATION 
    {{eagleeye}}/3rd/opencl/lib/{{'${ANDROID_ABI}'}}/libOpenCL.so
)
TARGET_LINK_LIBRARIES({{project}} libOpenCL)

add_definitions(-DEAGLEEYE_NEON_OPTIMIZATION)
TARGET_LINK_LIBRARIES({{project}} 
                      libeagleeye.so
                      log)

find_package(OpenMP)
if(OpenMP_CXX_FOUND)
    target_link_libraries({{project}} OpenMP::OpenMP_CXX)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
endif()

message("build {{project}} executable demo")
set({{project}}_demo_SRC 
    ./{{project}}_demo.cpp)
add_executable({{project}}_demo {{'${'}}{{project}}_demo_SRC{{'}'}}) 
target_link_libraries({{project}}_demo {{project}})
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fuse-ld=gold")

# set_target_properties(pipeline PROPERTIES PREFIX "")        # no 'lib' prefix
# set_target_properties(pipeline PROPERTIES SUFFIX ".so")     # must be .so (not .dylib)
# set_target_properties(pipeline PROPERTIES LINK_FLAGS "-all_load")
# TARGET_LINK_LIBRARIES(pipeline 
#                       libeagleeye.a
#                       ${PYTHON_LIBRARIES}
#                       ${Boost_LIBRARIES})

