#include "eagleeye/common/EagleeyeMacro.h"
#include "eagleeye/framework/pipeline/AnyNode.h"
#include "eagleeye/framework/pipeline/SignalFactory.h"
#include "eagleeye/framework/pipeline/AnyPipeline.h"
#include "eagleeye/processnode/Placeholder.h"
#include "eagleeye/processnode/NNNode.h"
#include "eagleeye/processnode/IdentityNode.h"
#include "eagleeye/common/EagleeyeFactory.h"
#include "eagleeye/common/EagleeyeStr.h"
{% if custom_paddle_ops|length > 0 %}
#include "eagleeye/engine/nano/op/paddle_op.hpp"
{% endif %}
#include <functional>
#include "{{project}}_plugin.h"

namespace eagleeye{

/**
 * @brief register pipeline plugin
 * 
 */
EAGLEEYE_PIPELINE_REGISTER({{project}}, {{version}}, {{signature}});

/**
 * @brief nnnode custom op builder
 * 
 */
OpBFuncType op_builder=[](dataflow::Graph* g, std::string op_name, std::string op_cls, neb::CJsonObject op_config, dataflow::Node*& op_ptr, std::string resource_folder){
    // 基于op_cls，创建模型算子
    if(op_cls == "PaddleOp"){
        // input config
        {% if custom_paddle_ops|length > 0 %}
        neb::CJsonObject input_config;
        op_config.Get("input", input_config);
        neb::CJsonObject input_name_arr;
        neb::CJsonObject input_shape_arr;
        neb::CJsonObject input_type_arr;
        input_config.Get("name", input_name_arr);
        std::vector<std::string> input_name_list(input_name_arr.GetArraySize());
        std::vector<EagleeyeType> input_type_list(input_name_arr.GetArraySize());
        std::vector<std::vector<int64_t>> input_shape_list(input_name_arr.GetArraySize());
        input_config.Get("shape", input_shape_arr);
        input_config.Get("type", input_type_arr);
        for(int i=0; i<input_name_list.size(); ++i){
            // name
            input_name_arr.Get(i, input_name_list[i]);
            // type
            std::string type_str;
            input_type_arr.Get(i, type_str);
            if(type_str == "FLOAT"){
                input_type_list[i] = EAGLEEYE_FLOAT;
            }
            else if(type_str == "UCHAR"){
                input_type_list[i] = EAGLEEYE_UCHAR;
            }
            else if(type_str == "INT"){
                input_type_list[i] = EAGLEEYE_INT;
            }
            else{
                EAGLEEYE_LOGE("Dont support input type %s", type_str.c_str());
            }
            
            // shape
            neb::CJsonObject shape;
            input_shape_arr.Get(i, shape);
            input_shape_list[i].resize(shape.GetArraySize());
            for(int j=0; j<input_shape_list[i].size(); ++j){
                shape.Get(j, input_shape_list[i][j]);
            }
        }

        // output config
        neb::CJsonObject output_config;
        op_config.Get("output", output_config);
        neb::CJsonObject output_name_arr;
        neb::CJsonObject output_shape_arr;
        neb::CJsonObject output_type_arr;
        output_config.Get("name", output_name_arr);
        std::vector<std::string> output_name_list(output_name_arr.GetArraySize());
        std::vector<EagleeyeType> output_type_list(output_name_arr.GetArraySize());
        std::vector<std::vector<int64_t>> output_shape_list(output_name_arr.GetArraySize());
        output_config.Get("shape", output_shape_arr);
        output_config.Get("type", output_type_arr);
        for(int i=0; i<output_name_list.size(); ++i){
            // name
            output_name_arr.Get(i, output_name_list[i]);
            // type
            std::string type_str;
            output_type_arr.Get(i, type_str);
            if(type_str == "FLOAT"){
                output_type_list[i] = EAGLEEYE_FLOAT;
            }
            else if(type_str == "UCHAR"){
                output_type_list[i] = EAGLEEYE_UCHAR;
            }
            else if(type_str == "INT"){
                output_type_list[i] = EAGLEEYE_INT;
            }
            else{
                EAGLEEYE_LOGE("Dont support output type %s", type_str.c_str());
            }
            
            // shape
            neb::CJsonObject shape;
            output_shape_arr.Get(i, shape);
            output_shape_list[i].resize(shape.GetArraySize());
            for(int j=0; j<output_shape_list[i].size(); ++j){
                shape.Get(j, output_shape_list[i][j]);
            }
        }

        std::string device;
        op_config.Get("device", device);

        std::string model_name;
        op_config.Get("model_name", model_name);
        {%for op in custom_paddle_ops%}
        if(op_name == "{{op["name"]}}"){
            op_ptr = 
                g->add(op_name, 
                        dataflow::PaddleOp<{{op["input"] | length}},{{op["output"] | length}}>(model_name, 
                                            device, 
                                            input_name_list, 
                                            input_shape_list, 
                                            input_type_list, 
                                            output_name_list, 
                                            output_shape_list,
                                            output_type_list, 
                                            1, 
                                            NO_BIND,
                                            resource_folder,
                                            "/sdcard/"), 
                        EagleeyeRuntime(EAGLEEYE_CPU));
        }

        {% endfor %}
        {% endif %}
    }
    else if(op_cls == "TNNOp"){
        op_ptr = NULL;
        return false;
    }
    return true;
};

/**
 * @brief pipeline node custom builder
 * 
 */
{% for model in precompiled_models %}
void __build_{{model}}_node(neb::CJsonObject node_param, AnyNode*& node);
{% endfor %} 
NodeBFuncType node_builder=[](std::string node_name, std::string cls_name, neb::CJsonObject node_config, AnyNode*& node_ptr, std::string resource_folder){
    // 创建自定义节点
    if(cls_name == "NNNode"){
        NNNode* nn_node = new NNNode();
        nn_node->setUnitName(node_name.c_str());
        if(nn_node->load(node_config, op_builder, resource_folder)){
            node_ptr = nn_node;
            return true;
        }

        delete nn_node;
        node_ptr = NULL;
        return false;
    }
    else{
        // 所有其他节点
        {% for model in precompiled_models %}
        if(cls_name == "{{model}}"){
            __build_{{model}}_node(node_config, node_ptr);
            return true;
        }
        {% endfor %}
    }

    node_ptr = NULL;
    return false;
};

/**
 * @brief configure pipeline plugin
 * 
 */
EAGLEEYE_BEGIN_PIPELINE_INITIALIZE({{project}})
// 创建管线
std::string resource_folder = {{project}}->resourceFolder();
if(!endswith(resource_folder, "/")){
    resource_folder += "/";
}
std::string pipeline_config_json = resource_folder + "{{project}}.json";
eagleeye_build_pipeline_from_json({{project}}, pipeline_config_json.c_str(), node_builder);
EAGLEEYE_END_PIPELINE_INITIALIZE({{project}})
}